/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package sandbox.explorer

import arrow.fx.ForIO
import arrow.fx.IO
import arrow.fx.extensions.io.monad.monad
import arrow.fx.fix
import arrow.mtl.EitherT
import arrow.mtl.extensions.eithert.monad.monad
import arrow.mtl.value
import org.jetbrains.exposed.sql.Database
import org.jetbrains.exposed.sql.transactions.TransactionManager
import sandbox.explorer.logic.CsvUserImporter
import sandbox.explorer.logic.GitHubApiCaller
import sandbox.explorer.logic.GitHubMetricConverter
import java.io.File
import java.sql.Connection

fun main(args: Array<String>) = App.run.value().fix().unsafeRunSync()

object App {
    fun connectToDatabase(): Database {
        val filePath = File("db/explorer-db.sqlt").getAbsolutePath()
        val db = Database.connect("jdbc:sqlite:$filePath", "org.sqlite.JDBC")
        db.useNestedTransactions = true
        TransactionManager.manager.defaultIsolationLevel = Connection.TRANSACTION_SERIALIZABLE
        return db
    }

    val run = EitherT.monad<ForIO, AppError>(IO.monad()).fx.monad {
        val db = App.connectToDatabase()

        val people = ! CsvUserImporter.importUsers

        people.map { aPerson ->
            aPerson.firstName

            val gitHubInfo = ! GitHubApiCaller.callApi(aPerson.gitHubUsername)
            val gitHubUserInfo = ! GitHubUserInfo.deserializeFromJson2(gitHubInfo)

            val result = ! GitHubMetricConverter.convertAndSaveData(gitHubUserInfo, aPerson)
            result
        }
    }
}
