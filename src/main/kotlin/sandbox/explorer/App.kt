/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package sandbox.explorer

import arrow.core.Either
import arrow.fx.IO
import arrow.fx.extensions.fx
import arrow.fx.handleError
import java.io.File
import java.sql.Connection
import org.jetbrains.exposed.sql.Database
import org.jetbrains.exposed.sql.transactions.TransactionManager
import sandbox.explorer.logic.CsvUserImporter
import sandbox.explorer.logic.PeopleProcessor

enum class RunMode {
    NORMAL, PARALLEL
}

suspend fun main(args: Array<String>) =
    IO.fx {
        val runMode: RunMode = if (args.any() && args.first() == "parallel") {
            RunMode.PARALLEL
        } else {
            RunMode.NORMAL
        }

        // val result = ! App.run(runMode).value().fix()
        val result = ! App.run(runMode)

        when (result) {
            is Either.Left -> println("Error occurred - ${result.a}")
            is Either.Right -> println("Success!! - ${result.b}")
        }
    }
    .handleError { err -> println("::: Fatal error occurred: ${err.message} ") }
    .suspended()

object App {
    fun connectToDatabase(): Database {
        val filePath = File("db/explorer-db.sqlt").getAbsolutePath()
        val db = Database.connect("jdbc:sqlite:$filePath", "org.sqlite.JDBC")
        db.useNestedTransactions = true
        TransactionManager.manager.defaultIsolationLevel = Connection.TRANSACTION_SERIALIZABLE
        return db
    }

    fun run(runMode: RunMode) =
        IO.fx {
            App.connectToDatabase()

            val eitherPeople = ! CsvUserImporter.importUsers

            val result = when (eitherPeople) {
                is Either.Left -> eitherPeople
                is Either.Right ->
                    ! if (runMode == RunMode.PARALLEL) {
                        println("::: Running in parallel :::")
                        PeopleProcessor.processPeopleParallel(eitherPeople.b)
                    } else {
                        println("::: Running normal :::")
                        PeopleProcessor.processPeople(eitherPeople.b)
                    }
            }

            result
        }
}
